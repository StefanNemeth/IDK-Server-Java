apply plugin: 'groovy'

ext {
    mainClassName = 'org.stevewinfield.suja.idk.Bootloader' // class to start when JAR is started
    buildNumber = 'c988ccce'
}

repositories {
    mavenCentral()
}

group = 'org.stevewinfield.suja.idk'
version = '0.1-SNAPSHOT'

// Java 7
sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
    dist
}

dependencies {
    compile 'com.jolbox:bonecp:0.7.1.RELEASE'
    compile 'org.magicwerk:brownies-collections:0.9.4'
    compile 'com.google.guava:guava:14.0.1'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'log4j:log4j:1.2.17'
    compile 'mysql:mysql-connector-java:5.1.25'
    compile 'io.netty:netty:3.6.6.Final'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    compile 'commons-io:commons-io:2.4'
    compile 'org.fusesource.jansi:jansi:1.11'
    testCompile 'junit:junit:4.11'
    testCompile "org.codehaus.groovy:groovy-all:2.3.6:indy"
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName, 'Implementation-Title': project.name, 'Implementation-Version': version
    }
}

// creates a JAR containing all the javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// creates a JAR containg the source code
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// contains a runnable JAR containing this project and its dependencies
task allJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    classifier = 'all'

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/MANIFEST.MF'
    exclude 'LICENSE.txt'

    manifest {
        attributes 'Main-Class': mainClassName, 'Implementation-Title': project.name, 'Implementation-Version': version
    }
}

// contains a ZIP usable for distributing
task distZip(type: Zip, dependsOn: processDistResources) {
    from sourceSets.dist.output
    from allJar.outputs.files

    classifier = 'dist'
}

// this task can be called when wanting to create a distribution
task dist {}

dist.dependsOn jar
dist.dependsOn javadocJar
dist.dependsOn sourceJar
dist.dependsOn allJar
dist.dependsOn distZip

import org.apache.tools.ant.filters.ReplaceTokens

processDistResources {
    from(sourceSets.dist.resources.srcDirs) {
        include '**/*.sh'
        include '**/*.bat'
        filter ReplaceTokens, tokens: [
                binary: allJar.archiveName
        ]
    }

    inputs.property('archiveName', { allJar.archiveName })
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'build.properties'
        filter ReplaceTokens, tokens: [
                name   : project.name,
                version: project.version,
                group  : project.group,
                build  : project.buildNumber,
        ]
    }

    inputs.property('project.name', { project.name })
    inputs.property('project.version', { project.version })
    inputs.property('project.group', { project.group })
    inputs.property('project.buildNumber', { project.buildNumber })
}